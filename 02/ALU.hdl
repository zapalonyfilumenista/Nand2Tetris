// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16(a=x, b=false, sel=zx, out=a);
    Not16(in=a, out=nota);
    Mux16(a=a, b=nota, sel=nx, out=xpreset);
 
    Mux16(a=y, b=false, sel=zy, out=b);
    Not16(in=b, out=notb);
    Mux16(a=b, b=notb, sel=ny, out=ypreset);

    And16(a=xpreset, b=ypreset, out=c);
    Add16(a=xpreset, b=ypreset, out=d);
    Mux16(a=c, b=d, sel=f, out=e);
    Not16(in=e, out=g);
    Mux16(a=e, b=g, sel=no, out=out);


    // zr and ng
    Mux16(a=e, b=g, sel=no, out[0]=dupa0, out[1]=dupa1, out[2]=dupa2, out[3]=dupa3, out[4]=dupa4, out[5]=dupa5, out[6]=dupa6, out[7]=dupa7, out[8]=dupa8, out[9]=dupa9, out[10]=dupa10, out[11]=dupa11, out[12]=dupa12, out[13]=dupa13, out[14]=dupa14, out[15]=dupa15);
    And(a=dupa15, b=dupa15, out=ng);
    Or(a=dupa0, b=dupa1, out=h);
    Or(a=h, b=dupa2, out=i);
    Or(a=i, b=dupa3, out=j);
    Or(a=j, b=dupa4, out=k);
    Or(a=k, b=dupa5, out=l);
    Or(a=l, b=dupa6, out=m);
    Or(a=m, b=dupa7, out=n);
    Or(a=n, b=dupa8, out=o);
    Or(a=o, b=dupa9, out=p);
    Or(a=p, b=dupa10, out=q);
    Or(a=q, b=dupa11, out=r);
    Or(a=r, b=dupa12, out=s);
    Or(a=s, b=dupa13, out=t);
    Or(a=t, b=dupa14, out=u);
    Or(a=u, b=dupa15, out=v);
    Not(in=v, out=zr);

    /*
    PrÃ³ba zoptymalizowania zr, ng
    Mux16(a=e, b=g, sel=no, out[0..7]=dupa0do7, out[8..14]=dupa8do14, out[15]=dupa15);
    And(a=dupa15, b=dupa15, out=ng);
    Or8Way(in=dupa0do7, out=x);
    Or8Way(in[0..6]=dupa8do14, in[7]=dupa15, out=y);
    Or(a=x, b=y, out=z);
    Not(in=z, out=zr);
    */



    
}